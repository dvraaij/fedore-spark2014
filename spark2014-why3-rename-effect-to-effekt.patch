From deb14b0676f3b247124c77941d4b4b5c374afe19 Mon Sep 17 00:00:00 2001
From: Paul Patault <paul.patault@lmf.cnrs.fr>
Date: Wed, 2 Oct 2024 10:41:05 +0200
Subject: [PATCH] effect renamed to effekt

---
 src/extract/mltree.ml  |  2 +-
 src/extract/mltree.mli | 30 +++++++++----------
 src/mlw/expr.ml        |  2 +-
 src/mlw/expr.mli       |  4 +--
 src/mlw/ity.ml         | 68 +++++++++++++++++++++---------------------
 src/mlw/ity.mli        | 64 +++++++++++++++++++--------------------
 6 files changed, 85 insertions(+), 85 deletions(-)

diff --git a/src/extract/mltree.ml b/why3/src/extract/mltree.ml
index 6cde45106c..c6f04643aa 100644
--- a/why3/src/extract/mltree.ml
+++ b/why3/src/extract/mltree.ml
@@ -57,7 +57,7 @@ type expr = {
   e_node   : expr_node;
   e_ity    : ity;
   e_mlty   : ty;
-  e_effect : effect;
+  e_effect : effekt;
   e_attrs  : Sattr.t;
 }

diff --git a/why3/src/extract/mltree.mli b/why3/src/extract/mltree.mli
index 2dc94010b6..760cb928b4 100644
--- a/why3/src/extract/mltree.mli
+++ b/why3/src/extract/mltree.mli
@@ -43,7 +43,7 @@ type expr = {
   e_node : expr_node;
   e_ity : ity;
   e_mlty : ty;
-  e_effect : Ity.effect;
+  e_effect : Ity.effekt;
   e_attrs : Ident.Sattr.t;
 }
 and expr_node =
@@ -121,7 +121,7 @@ val iter_deps : (Ident.ident -> unit) -> decl -> unit

 val ity_unit : ity

-val mk_expr : expr_node -> ity -> Ity.mask -> ty -> Ity.effect -> Ident.Sattr.t -> expr
+val mk_expr : expr_node -> ity -> Ity.mask -> ty -> Ity.effekt -> Ident.Sattr.t -> expr

 val tunit : ty

@@ -147,37 +147,37 @@ val e_dummy_unit : expr

 val e_unit : expr

-val e_const : Constant.constant -> ity -> Ity.mask -> ty -> Ity.effect -> Ident.Sattr.t -> expr
+val e_const : Constant.constant -> ity -> Ity.mask -> ty -> Ity.effekt -> Ident.Sattr.t -> expr

-val e_var : Ity.pvsymbol -> ity -> Ity.mask -> ty -> Ity.effect -> Ident.Sattr.t -> expr
+val e_var : Ity.pvsymbol -> ity -> Ity.mask -> ty -> Ity.effekt -> Ident.Sattr.t -> expr

 val var_defn : Ity.pvsymbol -> expr -> let_def

 val sym_defn : Expr.rsymbol -> Ty.Stv.t -> ty -> var list -> expr -> let_def

-val e_let : let_def -> expr -> ity -> Ity.mask -> ty -> Ity.effect -> Ident.Sattr.t -> expr
+val e_let : let_def -> expr -> ity -> Ity.mask -> ty -> Ity.effekt -> Ident.Sattr.t -> expr

-val e_app : Expr.rsymbol -> expr list -> is_partial -> ity -> Ity.mask -> ty -> Ity.effect -> Ident.Sattr.t -> expr
+val e_app : Expr.rsymbol -> expr list -> is_partial -> ity -> Ity.mask -> ty -> Ity.effekt -> Ident.Sattr.t -> expr

-val e_fun : var list -> expr -> ity -> Ity.mask -> ty -> Ity.effect -> Ident.Sattr.t -> expr
+val e_fun : var list -> expr -> ity -> Ity.mask -> ty -> Ity.effekt -> Ident.Sattr.t -> expr

 val e_ignore : expr -> expr

-val e_if : expr -> expr -> expr -> Ity.mask -> ty -> Ity.effect -> Ident.Sattr.t -> expr
+val e_if : expr -> expr -> expr -> Ity.mask -> ty -> Ity.effekt -> Ident.Sattr.t -> expr

-val e_while : expr -> expr -> Ity.mask -> ty -> Ity.effect -> Ident.Sattr.t -> expr
+val e_while : expr -> expr -> Ity.mask -> ty -> Ity.effekt -> Ident.Sattr.t -> expr

-val e_for : Ity.pvsymbol -> ty -> Ity.pvsymbol -> for_direction -> Ity.pvsymbol -> expr -> Ity.mask -> ty -> Ity.effect -> Ident.Sattr.t -> expr
+val e_for : Ity.pvsymbol -> ty -> Ity.pvsymbol -> for_direction -> Ity.pvsymbol -> expr -> Ity.mask -> ty -> Ity.effekt -> Ident.Sattr.t -> expr

-val e_match : expr -> reg_branch list -> exn_branch list -> ity -> Ity.mask -> ty -> Ity.effect -> Ident.Sattr.t -> expr
+val e_match : expr -> reg_branch list -> exn_branch list -> ity -> Ity.mask -> ty -> Ity.effekt -> Ident.Sattr.t -> expr

-val e_assign : (expr * ty * Expr.rsymbol * expr) list -> ity -> Ity.mask -> Ity.effect -> Ident.Sattr.t -> expr
+val e_assign : (expr * ty * Expr.rsymbol * expr) list -> ity -> Ity.mask -> Ity.effekt -> Ident.Sattr.t -> expr

-val e_absurd : ity -> Ity.mask -> ty -> Ity.effect -> Ident.Sattr.t -> expr
+val e_absurd : ity -> Ity.mask -> ty -> Ity.effekt -> Ident.Sattr.t -> expr

-val e_seq : expr -> expr -> ity -> Ity.mask -> ty -> Ity.effect -> Ident.Sattr.t -> expr
+val e_seq : expr -> expr -> ity -> Ity.mask -> ty -> Ity.effekt -> Ident.Sattr.t -> expr

-val e_coerce : expr -> ity -> Ity.mask -> ty -> Ity.effect -> Ident.Sattr.t -> expr
+val e_coerce : expr -> ity -> Ity.mask -> ty -> Ity.effekt -> Ident.Sattr.t -> expr

 val var_list_of_pv_list : Ity.pvsymbol list -> ty list -> expr list

diff --git a/why3/src/mlw/expr.ml b/why3/src/mlw/expr.ml
index 2aac9fc286..88f62e8039 100644
--- a/why3/src/mlw/expr.ml
+++ b/why3/src/mlw/expr.ml
@@ -321,7 +321,7 @@ type expr = {
   e_node   : expr_node;
   e_ity    : ity;
   e_mask   : mask;
-  e_effect : effect;
+  e_effect : effekt;
   e_attrs  : Sattr.t;
   e_loc    : Loc.position option;
   e_id     : expr_id;
diff --git a/why3/src/mlw/expr.mli b/why3/src/mlw/expr.mli
index e32b9f2ca1..bc19d694a0 100644
--- a/why3/src/mlw/expr.mli
+++ b/why3/src/mlw/expr.mli
@@ -128,7 +128,7 @@ type expr = private {
   e_node   : expr_node;
   e_ity    : ity;
   e_mask   : mask;
-  e_effect : effect;
+  e_effect : effekt;
   e_attrs  : Sattr.t;
   e_loc    : Loc.position option;
   e_id     : expr_id;
@@ -281,7 +281,7 @@ val e_absurd : ity -> expr
 val e_fold : ('a -> expr -> 'a) -> 'a -> expr -> 'a
 (** [e_fold] does not descend into Cfun *)

-val e_locate_effect : (effect -> bool) -> expr -> Loc.position option
+val e_locate_effect : (effekt -> bool) -> expr -> Loc.position option
 (** [e_locate_effect pr e] looks for a minimal sub-expression of
     [e] whose effect satisfies [pr] and returns its location *)

diff --git a/why3/src/mlw/ity.ml b/why3/src/mlw/ity.ml
index d3892e22b1..bc2870d830 100644
--- a/why3/src/mlw/ity.ml
+++ b/why3/src/mlw/ity.ml
@@ -898,7 +898,7 @@ let oneway_union t1 t2 = match t1, t2 with
   | _, Diverges | Diverges, _ -> Diverges
   | _ -> Partial

-type effect = {
+type effekt = {
   eff_reads  : Spv.t;         (* known variables *)
   eff_writes : Spv.t Mreg.t;  (* writes to fields *)
   eff_taints : Sreg.t;        (* ghost code writes *)
@@ -1105,7 +1105,7 @@ let eff_assign asl =
     Mreg.fold add_write mpl acc in
   let resets,_,_ = Mint.fold add_level m (Sreg.empty,Mreg.empty,Mreg.empty) in
   (* construct the effect *)
-  let effect = {
+  let effekt = {
     eff_reads  = reads;
     eff_writes = Mreg.map Mpv.domain writes;
     eff_taints = taint;
@@ -1116,8 +1116,8 @@ let eff_assign asl =
     eff_oneway = Total;
     eff_ghost  = ghost } in
   (* verify that we can rebuild every value *)
-  check_writes effect reads;
-  effect
+  check_writes effekt reads;
+  effekt

 let eff_reset_overwritten ({eff_writes = wr} as e) =
   if not (Sreg.is_empty e.eff_resets) then
@@ -1297,21 +1297,21 @@ type cty = {
   cty_post   : post list;
   cty_xpost  : post list Mxs.t;
   cty_oldies : pvsymbol Mpv.t;
-  cty_effect : effect;
+  cty_effect : effekt;
   cty_result : ity;
   cty_mask   : mask;
   cty_freeze : ity_subst;
 }

-let cty_unsafe args pre post xpost oldies effect result mask freeze = {
+let cty_unsafe args pre post xpost oldies effekt result mask freeze = {
   cty_args   = args;
   cty_pre    = pre;
   cty_post   = post;
   cty_xpost  = xpost;
   cty_oldies = oldies;
-  cty_effect = effect;
+  cty_effect = effekt;
   cty_result = result;
-  cty_mask   = mask_adjust effect result mask;
+  cty_mask   = mask_adjust effekt result mask;
   cty_freeze = freeze;
 }

@@ -1358,7 +1358,7 @@ let check_post exn ity post =
     | _ -> raise exn) post

 let create_cty ?(mask=MaskVisible) ?(defensive=false)
-               args pre post xpost oldies effect result =
+               args pre post xpost oldies effekt result =
   let exn = Invalid_argument "Ity.create_cty" in
   (* pre, post, and xpost are well-typed *)
   check_pre pre; check_post exn result post;
@@ -1375,27 +1375,27 @@ let create_cty ?(mask=MaskVisible) ?(defensive=false)
     if not (gh && o == ity_purify t) then raise exn) oldies;
   let preads = spec_t_fold t_freepvs sarg pre [] Mxs.empty in
   let qreads = spec_t_fold t_freepvs Spv.empty [] post xpost in
-  let effect = eff_read_post effect qreads in
-  let oldies = Mpv.set_inter oldies effect.eff_reads in
-  let effect = eff_bind oldies effect in
+  let effekt = eff_read_post effekt qreads in
+  let oldies = Mpv.set_inter oldies effekt.eff_reads in
+  let effekt = eff_bind oldies effekt in
   let preads = Mpv.fold (Util.const Spv.add) oldies preads in
   if not (Mpv.set_disjoint preads oldies) then raise exn;
-  let effect = eff_read_pre preads effect in
-  let xreads = Spv.diff effect.eff_reads sarg in
+  let effekt = eff_read_pre preads effekt in
+  let xreads = Spv.diff effekt.eff_reads sarg in
   let freeze = Spv.fold freeze_pv xreads isb_empty in
-  let freeze = Sxs.fold freeze_xs effect.eff_raises freeze in
-  check_tvs effect.eff_reads effect.eff_raises result pre post xpost;
+  let freeze = Sxs.fold freeze_xs effekt.eff_raises freeze in
+  check_tvs effekt.eff_reads effekt.eff_raises result pre post xpost;
   (* remove exceptions whose postcondition is False *)
   let is_false q = match open_post q with
     | _, {t_node = Tfalse} -> true | _ -> false in
   let filter _ () = function
     | [q] when is_false q -> None | _ -> Some () in
-  let raises = Mxs.diff filter effect.eff_raises xpost in
-  let effect = { effect with eff_raises = raises } in
+  let raises = Mxs.diff filter effekt.eff_raises xpost in
+  let effekt = { effekt with eff_raises = raises } in
   (* remove writes/taints invalidated by resets *)
-  let effect = { effect with
-    eff_writes = Mreg.set_inter effect.eff_writes effect.eff_covers;
-    eff_taints = Mreg.set_inter effect.eff_taints effect.eff_covers} in
+  let effekt = { effekt with
+    eff_writes = Mreg.set_inter effekt.eff_writes effekt.eff_covers;
+    eff_taints = Mreg.set_inter effekt.eff_taints effekt.eff_covers} in
   (* remove effects on unknown regions. We reset eff_taints
      instead of simply filtering the existing set in order
      to get rid of non-ghost writes into ghost regions.
@@ -1409,27 +1409,27 @@ let create_cty ?(mask=MaskVisible) ?(defensive=false)
      be removed (we cannot create a real regular alias to a
      ghost location), but it is simpler to just recast them
      as ghost, to keep the type signature consistent. *)
-  let rknown = read_regs effect.eff_reads in
+  let rknown = read_regs effekt.eff_reads in
   let vknown = ity_rch_regs rknown result in
   let add_xs xs s = ity_rch_regs s xs.xs_ity in
   let vknown = Sxs.fold add_xs raises vknown in
-  let effect = reset_taints { effect with
-    eff_writes = Mreg.set_inter effect.eff_writes rknown;
-    eff_covers = Mreg.set_inter effect.eff_covers rknown;
-    eff_resets = Mreg.set_inter effect.eff_resets vknown} in
+  let effekt = reset_taints { effekt with
+    eff_writes = Mreg.set_inter effekt.eff_writes rknown;
+    eff_covers = Mreg.set_inter effekt.eff_covers rknown;
+    eff_resets = Mreg.set_inter effekt.eff_resets vknown} in
   (* only spoil the escaping type variables *)
-  let escape = eff_escape effect result in
+  let escape = eff_escape effekt result in
   let escape = Sity.fold_left ity_rch_vars Stv.empty escape in
-  let spoils = Stv.inter effect.eff_spoils escape in
-  let effect = { effect with eff_spoils = spoils } in
+  let spoils = Stv.inter effekt.eff_spoils escape in
+  let effekt = { effekt with eff_spoils = spoils } in
   (* be defensive in abstract function declarations *)
-  let effect = if not defensive then effect else
+  let effekt = if not defensive then effekt else
     let resets = Mreg.set_diff vknown rknown in
-    let resets = Mreg.set_union effect.eff_resets resets in
-    { effect with eff_resets = resets; eff_spoils = escape } in
+    let resets = Mreg.set_union effekt.eff_resets resets in
+    { effekt with eff_resets = resets; eff_spoils = escape } in
   (* remove the formal parameters from eff_reads *)
-  let effect = { effect with eff_reads = xreads } in
-  cty_unsafe args pre post xpost oldies effect result mask freeze
+  let effekt = { effekt with eff_reads = xreads } in
+  cty_unsafe args pre post xpost oldies effekt result mask freeze

 let create_cty_defensive = create_cty ~defensive:true
 let create_cty           = create_cty ~defensive:false
diff --git a/why3/src/mlw/ity.mli b/why3/src/mlw/ity.mli
index 5e037a004e..555b5fa2c5 100644
--- a/why3/src/mlw/ity.mli
+++ b/why3/src/mlw/ity.mli
@@ -371,7 +371,7 @@ val total : oneway -> bool
 val partial : oneway -> bool
 val diverges : oneway -> bool

-type effect = private {
+type effekt = private {
   eff_reads  : Spv.t;         (* known variables *)
   eff_writes : Spv.t Mreg.t;  (* writes to fields *)
   eff_taints : Sreg.t;        (* ghost code writes *)
@@ -383,46 +383,46 @@ type effect = private {
   eff_ghost  : bool;          (* ghost status *)
 }

-val eff_empty : effect
+val eff_empty : effekt
 (** Effect of a non-ghost total function without any observational effect of any
     kinds *)

-val eff_equal : effect -> effect -> bool
-val eff_pure : effect -> bool
+val eff_equal : effekt -> effekt -> bool
+val eff_pure : effekt -> bool

-val eff_read : Spv.t -> effect
-val eff_write : Spv.t -> Spv.t Mreg.t -> effect (* drops writes outside reads *)
-val eff_assign : (pvsymbol * pvsymbol * pvsymbol) list -> effect (* r,field,v *)
+val eff_read : Spv.t -> effekt
+val eff_write : Spv.t -> Spv.t Mreg.t -> effekt (* drops writes outside reads *)
+val eff_assign : (pvsymbol * pvsymbol * pvsymbol) list -> effekt (* r,field,v *)

-val eff_read_pre  : Spv.t -> effect -> effect (* no stale-variable check *)
-val eff_read_post : effect -> Spv.t -> effect (* checks for stale variables *)
-val eff_bind      : Spv.t -> effect -> effect (* removes variables from reads *)
+val eff_read_pre  : Spv.t -> effekt -> effekt (* no stale-variable check *)
+val eff_read_post : effekt -> Spv.t -> effekt (* checks for stale variables *)
+val eff_bind      : Spv.t -> effekt -> effekt (* removes variables from reads *)

-val eff_read_single      : pvsymbol -> effect
-val eff_read_single_pre  : pvsymbol -> effect -> effect
-val eff_read_single_post : effect -> pvsymbol -> effect
-val eff_bind_single      : pvsymbol -> effect -> effect
+val eff_read_single      : pvsymbol -> effekt
+val eff_read_single_pre  : pvsymbol -> effekt -> effekt
+val eff_read_single_post : effekt -> pvsymbol -> effekt
+val eff_bind_single      : pvsymbol -> effekt -> effekt

-val eff_reset : effect -> Sreg.t -> effect    (* confine to an empty cover *)
-val eff_reset_overwritten : effect -> effect  (* confine regions under writes *)
+val eff_reset : effekt -> Sreg.t -> effekt    (* confine to an empty cover *)
+val eff_reset_overwritten : effekt -> effekt  (* confine regions under writes *)

-val eff_raise : effect -> xsymbol -> effect
-val eff_catch : effect -> xsymbol -> effect
+val eff_raise : effekt -> xsymbol -> effekt
+val eff_catch : effekt -> xsymbol -> effekt

-val eff_spoil : effect -> ity -> effect
+val eff_spoil : effekt -> ity -> effekt

-val eff_partial : effect -> effect                      (* forbidden if ghost *)
-val eff_diverge : effect -> effect                      (* forbidden if ghost *)
-val eff_ghostify : bool -> effect -> effect (* forbidden if fails or diverges *)
-val eff_ghostify_weak : bool -> effect -> effect     (* only if has no effect *)
+val eff_partial : effekt -> effekt                      (* forbidden if ghost *)
+val eff_diverge : effekt -> effekt                      (* forbidden if ghost *)
+val eff_ghostify : bool -> effekt -> effekt (* forbidden if fails or diverges *)
+val eff_ghostify_weak : bool -> effekt -> effekt     (* only if has no effect *)

-val eff_union_seq : effect -> effect -> effect  (* checks for stale variables *)
-val eff_union_par : effect -> effect -> effect  (* no stale-variable check *)
-val eff_fusion    : effect -> effect -> effect  (* drop invalidated writes *)
+val eff_union_seq : effekt -> effekt -> effekt  (* checks for stale variables *)
+val eff_union_par : effekt -> effekt -> effekt  (* no stale-variable check *)
+val eff_fusion    : effekt -> effekt -> effekt  (* drop invalidated writes *)

-val mask_adjust : effect -> ity -> mask -> mask
+val mask_adjust : effekt -> ity -> mask -> mask

-val eff_escape : effect -> ity -> Sity.t
+val eff_escape : effekt -> ity -> Sity.t

 val ity_affected : 'a Mreg.t -> ity -> bool
 (** [ity_affected wr ity] returns [true] if the regions of [ity] are contained
@@ -463,7 +463,7 @@ type cty = private {
   cty_post   : post list;
   cty_xpost  : post list Mxs.t;
   cty_oldies : pvsymbol Mpv.t;
-  cty_effect : effect;
+  cty_effect : effekt;
   cty_result : ity;
   cty_mask   : mask;
   cty_freeze : ity_subst;
@@ -471,7 +471,7 @@ type cty = private {

 val create_cty : ?mask:mask -> pvsymbol list ->
   pre list -> post list -> post list Mxs.t ->
-  pvsymbol Mpv.t -> effect -> ity -> cty
+  pvsymbol Mpv.t -> effekt -> ity -> cty
 (** [create_cty ?mask ?defensive args pre post xpost oldies effect result]
     creates a new cty. [post] and [mask] must be consistent with [result].
     The [cty_xpost] field does not have to cover all raised exceptions.
@@ -486,7 +486,7 @@ val create_cty : ?mask:mask -> pvsymbol list ->

 val create_cty_defensive : ?mask:mask -> pvsymbol list ->
   pre list -> post list -> post list Mxs.t ->
-  pvsymbol Mpv.t -> effect -> ity -> cty
+  pvsymbol Mpv.t -> effekt -> ity -> cty
 (** same as [create_cty], except that type variables in the result
     and exceptional results are spoiled and fresh regions in the
     result and exceptional results are reset. *)
@@ -565,4 +565,4 @@ val print_cty  : Format.formatter -> cty -> unit      (* computation type *)

 val print_spec :
   pvsymbol list -> pre list -> post list -> post list Mxs.t -> pvsymbol Mpv.t
-    -> effect -> Format.formatter -> ity option -> unit (* piecemeal cty *)
+    -> effekt -> Format.formatter -> ity option -> unit (* piecemeal cty *)
--
GitLab
