--- a/why3/configure.in
+++ b/why3/configure.in
@@ -1000,6 +1000,10 @@
          coq_compat_version="COQ817"
          COQFLAGS="-w deprecated-instance-without-locality,deprecated-hint-without-locality"
          ;;
+      8.18*)
+         coq_compat_version="COQ818"
+         COQFLAGS="-w deprecated-instance-without-locality,deprecated-hint-without-locality"
+         ;;
       *)
          enable_coq_support=no
          AC_MSG_WARN([You need Coq 8.7 or later; Coq discarded.])
--- a/why3/lib/coq/bv/BV_Gen.v
+++ b/why3/lib/coq/bv/BV_Gen.v
@@ -997,6 +997,7 @@
 Qed.
 
 Lemma mod1_succ_low : forall x y, y > 0 -> mod1 x y < (Z.pred y) -> mod1 (Z.succ x) y = Z.succ (mod1 x y).
+Proof.
   intros x y H.
   rewrite mod1_is_mod, mod1_is_mod by trivial.
   rewrite Z.mod_eq, Z.mod_eq by lia.
@@ -1006,7 +1007,8 @@
   trivial.
   rewrite <- Z.mod_eq in H0 by lia.
   split; [apply Z.le_le_succ_r, Z_mod_lt; trivial|lia].
-  rewrite <- Zplus_assoc_reverse, <- Z_div_mod_eq by lia; lia.
+  rewrite <- Zplus_assoc_reverse.
+  now rewrite <- Z.div_mod by lia.
 Qed.
 
 Lemma mod1_succ_high : forall x y, y > 0 -> mod1 x y = (Z.pred y) -> mod1 (Z.succ x) y = 0.
--- a/why3/lib/coq/map/Map.v
+++ b/why3/lib/coq/map/Map.v
@@ -47,9 +47,9 @@
 Proof.
 intros f x v y.
 unfold set.
-case why_decidable_eq.
+case (why_decidable_eq x y).
 intros <-.
-split ; try easy ; intros H ; now elim H. (* TODO: replace by easy after 8.4 *)
+now split.
 intros H.
 split ; intros H'.
 now elim H.
--- a/why3/share/provers-detection-data.conf
+++ b/why3/share/provers-detection-data.conf
@@ -828,7 +828,7 @@
 exec = "coqtop"
 version_switch = "-v"
 version_regexp = "The Coq Proof Assistant, version \\([^ \n]+\\)"
-version_ok = "^8\.1[0-7]\.[0-9]+$"
+version_ok = "^8\.1[0-8]\.[0-9]+$"
 version_ok = "^8\.[7-9]\.[0-9]+$"
 version_old = "8.6.1"
 version_old = "8.6"
